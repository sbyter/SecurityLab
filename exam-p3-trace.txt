Process:
{1}new skA: skey;
{2}new skB: skey;
{3}let pkA: pkey = pk(skA) in
{4}let pkB: pkey = pk(skB) in
{5}out(c, pkA);
{6}out(c, pkB);
(
    {7}!
    {8}out(c, (A,B));
    {9}in(c, xS: bitstring);
    {10}let (=B,Kab: key) = adec(xS,pkB) in
    {11}event beginAuth(A,B);
    {12}out(c, senc((A,aenc(M,pkB)),Kab))
) | (
    {13}!
    {14}in(c, xS_45: bitstring);
    {15}let (=A,Kab_46: key) = adec(xS_45,pkB) in
    {16}in(c, xA: bitstring);
    {17}let (xA1: bitstring,xA2: bitstring) = sdec(xA,Kab_46) in
    {18}let Mb: bitstring = adec(xA2,skB) in
    {19}if (A = xA1) then
    {20}event endAuth(A,B)
) | (
    {21}!
    {22}in(c, xA_47: bitstring);
    {23}let (=A,=B) = xA_47 in
    {24}new Kab_48: key;
    {25}out(c, aenc((B,Kab_48),skA));
    {26}out(c, aenc((A,Kab_48),skB))
)

-- Query event(endAuth(hA,hB)) ==> event(beginAuth(hA,hB))
Completing...
Starting query event(endAuth(hA,hB)) ==> event(beginAuth(hA,hB))
goal reachable: end(endAuth(A[],B[]))

1. The message pk(skB[]) may be sent to the attacker at output {6}.
attacker(pk(skB[])).

2. By 1, the attacker may know pk(skB[]).
Using the function pk the attacker may obtain pk(pk(skB[])).
attacker(pk(pk(skB[]))).

3. The attacker has some term k_375.
attacker(k_375).

4. The attacker initially knows A[].
attacker(A[]).

5. By 4, the attacker may know A[].
By 3, the attacker may know k_375.
Using the function 2-tuple the attacker may obtain (A[],k_375).
attacker((A[],k_375)).

6. By 5, the attacker may know (A[],k_375).
By 2, the attacker may know pk(pk(skB[])).
Using the function aenc the attacker may obtain aenc((A[],k_375),pk(pk(skB[]))).
attacker(aenc((A[],k_375),pk(pk(skB[])))).

7. The attacker has some term Mb_374.
attacker(Mb_374).

8. By 7, the attacker may know Mb_374.
By 1, the attacker may know pk(skB[]).
Using the function aenc the attacker may obtain aenc(Mb_374,pk(skB[])).
attacker(aenc(Mb_374,pk(skB[]))).

9. By 4, the attacker may know A[].
By 8, the attacker may know aenc(Mb_374,pk(skB[])).
Using the function 2-tuple the attacker may obtain (A[],aenc(Mb_374,pk(skB[]))).
attacker((A[],aenc(Mb_374,pk(skB[])))).

10. By 9, the attacker may know (A[],aenc(Mb_374,pk(skB[]))).
By 3, the attacker may know k_375.
Using the function senc the attacker may obtain senc((A[],aenc(Mb_374,pk(skB[]))),k_375).
attacker(senc((A[],aenc(Mb_374,pk(skB[]))),k_375)).

11. The message aenc((A[],k_375),pk(pk(skB[]))) that the attacker may have by 6 may be received at input {14}.
The message senc((A[],aenc(Mb_374,pk(skB[]))),k_375) that the attacker may have by 10 may be received at input {16}.
So event endAuth(A[],B[]) may be executed at {20}.
end(endAuth(A[],B[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

new skA: skey creating skA_391 at {1}

new skB: skey creating skB_381 at {2}

out(c, ~M_411) with ~M_411 = pk(skA_391) at {5}

out(c, ~M_413) with ~M_413 = pk(skB_381) at {6}

in(c, aenc((A,a_379),pk(~M_413))) with aenc((A,a_379),pk(~M_413)) = aenc((A,a_379),pk(pk(skB_381))) at {14} in copy a_380

in(c, senc((A,aenc(a,~M_413)),a_379)) with senc((A,aenc(a,~M_413)),a_379) = senc((A,aenc(a,pk(skB_381))),a_379) at {16} in copy a_380

event endAuth(A,B) at {20} in copy a_380 (goal)

The event endAuth(A,B) is executed.
A trace has been found.
RESULT event(endAuth(hA,hB)) ==> event(beginAuth(hA,hB)) is false.
-- Query not attacker(M[])
Completing...
Starting query not attacker(M[])
RESULT not attacker(M[]) is true.
