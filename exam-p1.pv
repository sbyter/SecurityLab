(* protocol 1 *)
set traceDisplay = long.

type host.
type nonce.
type key. (* symetric key *)

free c: channel.
free A,B: host.

(* converters *)
fun key_to_bitstring(key): bitstring [data, typeConverter].
fun bitstring_to_key(bitstring): key [data, typeConverter].
fun bitstring_to_nonce(bitstring): nonce [data, typeConverter].
fun nonce_to_bitstring(nonce): bitstring [data, typeConverter].

(* symetric encryption *)
fun senc(bitstring, key): bitstring.
reduc forall m: bitstring, k: key; sdec(senc(m,k),k) = m.

(* asymetric encryption *)
type pkey. (* public key *)
type skey. (* private key *)

fun pk(skey): pkey. (* unary constructor *)
fun aenc(bitstring, pkey): bitstring.
reduc forall m: bitstring, k: skey; adec(aenc(m, pk(k)), k) = m.

event beginKey(host,host,key).
event endKey(host,host,key).

free Kab: key [private].

(* Authentication *)
query attacker(Kab). (* Confidentiality *)
query hA:host, hB:host, zAB:key; event(endKey(hA,hB,zAB)) ==> event(beginKey(hA,hB,zAB)).

(* ------------------------------------------------------------------ *)
let clientA( Kas:key, A:host, B:host, n_a:nonce ) =
	out(c, A); (* 1a: A->B *)
	in(c, xS:bitstring); (* 3b receive message from server *)
	let(xS1:bitstring, xS2:bitstring) = xS in
	let(=B, n_b:nonce, Kab:key) = sdec(xS1,Kas) in
	event beginKey(A,B,Kab);
	out(c, ( xS2,senc((n_b,n_a),Kab) ) ); (* 4a send message to B *)
	in(c, xA:bitstring);
	let(=n_a) = bitstring_to_nonce(sdec(xA, Kab)).

let clientB( Kbs:key, A:host, B:host, n_b:nonce ) =
	in(c, xA:bitstring); (* 1b: receive message from A *)
	let(=A, y:bitstring) = xA in (* 1c: validate identity of A *)
	out(c, (B, senc((A, n_b), Kbs)));  (* 2a: Send message to server *)
	in(c, yA:bitstring ); (* 4b receive message from A *)
	let(yA1:bitstring, yA2:bitstring) = yA in
	let(Kab) = bitstring_to_key(sdec(yA1, Kbs)) in
	event endKey(A,B,Kab);
	let(=n_b, n_a:nonce) = sdec(yA2, Kab) in
	out(c, senc(nonce_to_bitstring(n_a), Kab)). (* 5a: send message to A *)

let server( Kas:key, Kbs:key, Kab:key, A:host, B:host ) =	
	in(c, xB:bitstring); (* 2b receive message from B *)
	let(=B, yB:bitstring) = xB in (* 2c: validate indentity of B *)
	let(=A, n_b:nonce) = sdec(yB, Kbs) in (* 2d: validate A *)
	out(c, (senc((B, n_b, Kab), Kas), senc(key_to_bitstring(Kab), Kbs))). (* 3a: S->A *)
	
process
	(* new skA: skey; new skB: skey; new skC: skey; *)
	(* let pkA = pk(skA) in let pkB = pk(skB) in let pkC = pk(skC) in *)
	(* out(c, pkA); out(c, pkB); out(c, skC); *)
	
	new Kas: key;
	new Kbs: key;
	(
	 (! new n_a: nonce; clientA(Kas, A, B, n_a)) |
	 (! new n_b: nonce; clientB(Kbs, A, B, n_b)) |
	 (! server(Kas, Kbs, Kab, A, B))
	)
